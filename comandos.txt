Levantamos el contenedor mysql-rds:
docker-compose up -d

Cambiar .env.webapp:
apinba.local

Cambiar nombre contenedor a apinba

Levantamos el contenedor apinba:
docker-compose up -d

Nos conectamos al contenedor apinba:
docker-compose exec web bash

Creamos el proyecto Symfony:
symfony new api-nba --version=4.4 --full --no-git

Copiamos todos los archivos y directorios salvo docker-compose.yml y Dockerfile a un directorio hacia atras:
cd api-nba
cp .env ../
cp .env.test ../
cp .gitignore ../
cp -r bin ../
cp composer.json ../
cp composer.lock ../
cp -r config ../
cp -r migrations ../
cp phpunit.xml.dist ../
cp -r public ../
cp -r src ../
cp symfony.lock ../
cp -r templates ../
cp -r tests ../
cp -r translations ../
cp -r var ../
cp -r vendor ../

Borramos la carpeta api-nba:
cd ..
rm -r api-nba

Damos permisos a cache y log:
chmod -R 777 var/cache/*
chmod -R 777 var/log

Creamos la base de datos conectandonos al contenedor mysql-rds y creamos la base de datos a partir del archivo .sql:
mysql -u root -pdbrootpass -h add-dbms nba < files/nba_2022-02-02.sql

Creamos las entities a partir del mapeo de la base de datos:
php bin/console doctrine:mapping:convert annotation src/Entity --from-database

Cargamos los datos de la base de datos a traves de los scripts de Python:
python3 scripts/fill_equipos.py
python3 scripts/fill_jugadores.py
python3 scripts/fill_estadisticas.py
python3 scripts/fill_partidos.py
